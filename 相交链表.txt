leetcode160.相交链表

给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。
如果两个链表不存在相交节点，返回 null 。



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */


public class Solution {
    /*public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null||headB==null)
            return null;
        ListNode head1=headA,head2=headB;		//暴力解法，时间复杂度o(n^2)
        while(head1!=null)
        {
            while(head2!=null)
            {
                if(head1==head2)
                {
                    return head2;
                }else
                {
                    head2=head2.next;
                }
            }
            head2=headB;
            head1=head1.next;
        }
        return null;
    }*/

    //双指针
    /*public ListNode getIntersectionNode(ListNode headA, ListNode headB){
        if(headA==null||headB==null)
            return null;
        ListNode A=headA,B=headB;
        while(A!=B)
        {
            A=A==null? headB:A.next;
            B=B==null? headA:B.next;
        }
        return A;
    }*/

    //求出相差的节点个数，然后双指针同时移动
    public ListNode getIntersectionNode(ListNode headA, ListNode headB){
        if(headA==null||headB==null)
            return null;
        ListNode A=headA,B=headB;
        int l1=0,l2=0,diff=0;
        while(A!=null)
        {
            l1++;
            A=A.next;
        }
        while(B!=null)
        {
            l2++;
            B=B.next;
        }
        if(l1<l2)
        {
            A=headB;B=headA;diff=l2-l1;
        }else{
            A=headA;B=headB;diff=l1-l2;
        }
        for(int i=0;i<diff;i++){
            A=A.next;
        }
        while(A!=null&&B!=null){
            if(A==B)
                return A;
            A=A.next;
            B=B.next;
        }
        return null;
    }
}